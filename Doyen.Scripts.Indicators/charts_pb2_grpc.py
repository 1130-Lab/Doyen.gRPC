# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import charts_pb2 as charts__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in charts_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ChartsServerStub(object):
    """Services
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitializeIndicator = channel.unary_unary(
                '/charts.ChartsServer/InitializeIndicator',
                request_serializer=charts__pb2.InitializeIndicatorRequest.SerializeToString,
                response_deserializer=charts__pb2.InitializeIndicatorResponse.FromString,
                _registered_method=True)
        self.StartIndicator = channel.unary_unary(
                '/charts.ChartsServer/StartIndicator',
                request_serializer=charts__pb2.StartIndicatorRequest.SerializeToString,
                response_deserializer=charts__pb2.StartIndicatorResponse.FromString,
                _registered_method=True)
        self.ProcessData = channel.unary_stream(
                '/charts.ChartsServer/ProcessData',
                request_serializer=charts__pb2.DataMessage.SerializeToString,
                response_deserializer=charts__pb2.DataMessageResponse.FromString,
                _registered_method=True)
        self.StopIndicator = channel.unary_unary(
                '/charts.ChartsServer/StopIndicator',
                request_serializer=charts__pb2.StopIndicatorRequest.SerializeToString,
                response_deserializer=charts__pb2.StopIndicatorResponse.FromString,
                _registered_method=True)


class ChartsServerServicer(object):
    """Services
    """

    def InitializeIndicator(self, request, context):
        """We first initialize the indicator with all requested data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartIndicator(self, request, context):
        """After your script has loaded the user data (if applicable) tell Doyen you are ready to start receiving data.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessData(self, request, context):
        """From this point on, data communication is at the speed of retrieval.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopIndicator(self, request, context):
        """When the user stops the indicator, we send a stop request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChartsServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitializeIndicator': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeIndicator,
                    request_deserializer=charts__pb2.InitializeIndicatorRequest.FromString,
                    response_serializer=charts__pb2.InitializeIndicatorResponse.SerializeToString,
            ),
            'StartIndicator': grpc.unary_unary_rpc_method_handler(
                    servicer.StartIndicator,
                    request_deserializer=charts__pb2.StartIndicatorRequest.FromString,
                    response_serializer=charts__pb2.StartIndicatorResponse.SerializeToString,
            ),
            'ProcessData': grpc.unary_stream_rpc_method_handler(
                    servicer.ProcessData,
                    request_deserializer=charts__pb2.DataMessage.FromString,
                    response_serializer=charts__pb2.DataMessageResponse.SerializeToString,
            ),
            'StopIndicator': grpc.unary_unary_rpc_method_handler(
                    servicer.StopIndicator,
                    request_deserializer=charts__pb2.StopIndicatorRequest.FromString,
                    response_serializer=charts__pb2.StopIndicatorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'charts.ChartsServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('charts.ChartsServer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChartsServer(object):
    """Services
    """

    @staticmethod
    def InitializeIndicator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/charts.ChartsServer/InitializeIndicator',
            charts__pb2.InitializeIndicatorRequest.SerializeToString,
            charts__pb2.InitializeIndicatorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartIndicator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/charts.ChartsServer/StartIndicator',
            charts__pb2.StartIndicatorRequest.SerializeToString,
            charts__pb2.StartIndicatorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/charts.ChartsServer/ProcessData',
            charts__pb2.DataMessage.SerializeToString,
            charts__pb2.DataMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopIndicator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/charts.ChartsServer/StopIndicator',
            charts__pb2.StopIndicatorRequest.SerializeToString,
            charts__pb2.StopIndicatorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
