# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import algos_pb2 as algos__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in algos_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AlgorithmServerStub(object):
    """Services
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitializeAlgorithm = channel.unary_unary(
                '/algos.AlgorithmServer/InitializeAlgorithm',
                request_serializer=algos__pb2.InitializeAlgorithmRequest.SerializeToString,
                response_deserializer=algos__pb2.InitializeAlgorithmResponse.FromString,
                _registered_method=True)
        self.StartAlgorithm = channel.unary_unary(
                '/algos.AlgorithmServer/StartAlgorithm',
                request_serializer=algos__pb2.StartAlgorithmRequest.SerializeToString,
                response_deserializer=algos__pb2.StartAlgorithmResponse.FromString,
                _registered_method=True)
        self.PauseAlgorithm = channel.unary_unary(
                '/algos.AlgorithmServer/PauseAlgorithm',
                request_serializer=algos__pb2.PauseAlgorithmRequest.SerializeToString,
                response_deserializer=algos__pb2.PauseAlgorithmResponse.FromString,
                _registered_method=True)
        self.ResumeAlgorithm = channel.unary_unary(
                '/algos.AlgorithmServer/ResumeAlgorithm',
                request_serializer=algos__pb2.ResumeAlgorithmRequest.SerializeToString,
                response_deserializer=algos__pb2.ResumeAlgorithmResponse.FromString,
                _registered_method=True)
        self.StopAlgorithm = channel.unary_unary(
                '/algos.AlgorithmServer/StopAlgorithm',
                request_serializer=algos__pb2.StopAlgorithmRequest.SerializeToString,
                response_deserializer=algos__pb2.StopAlgorithmResponse.FromString,
                _registered_method=True)
        self.ListAvailableAlgorithms = channel.unary_unary(
                '/algos.AlgorithmServer/ListAvailableAlgorithms',
                request_serializer=algos__pb2.ListAvailableAlgorithmsRequest.SerializeToString,
                response_deserializer=algos__pb2.ListAvailableAlgorithmsResponse.FromString,
                _registered_method=True)
        self.ListRunningAlgorithms = channel.unary_unary(
                '/algos.AlgorithmServer/ListRunningAlgorithms',
                request_serializer=algos__pb2.ListRunningAlgorithmsRequest.SerializeToString,
                response_deserializer=algos__pb2.ListRunningAlgorithmsResponse.FromString,
                _registered_method=True)
        self.SendOrder = channel.unary_unary(
                '/algos.AlgorithmServer/SendOrder',
                request_serializer=algos__pb2.SendOrderRequest.SerializeToString,
                response_deserializer=algos__pb2.SendOrderResponse.FromString,
                _registered_method=True)
        self.CancelOrder = channel.unary_unary(
                '/algos.AlgorithmServer/CancelOrder',
                request_serializer=algos__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=algos__pb2.CancelOrderResponse.FromString,
                _registered_method=True)
        self.TradeData = channel.unary_unary(
                '/algos.AlgorithmServer/TradeData',
                request_serializer=algos__pb2.TradeMessage.SerializeToString,
                response_deserializer=algos__pb2.TradeAck.FromString,
                _registered_method=True)
        self.CandlestickData = channel.unary_unary(
                '/algos.AlgorithmServer/CandlestickData',
                request_serializer=algos__pb2.CandlestickMessage.SerializeToString,
                response_deserializer=algos__pb2.CandlestickAck.FromString,
                _registered_method=True)
        self.DepthOfBookData = channel.unary_unary(
                '/algos.AlgorithmServer/DepthOfBookData',
                request_serializer=algos__pb2.DepthOfBookMessage.SerializeToString,
                response_deserializer=algos__pb2.DepthOfBookAck.FromString,
                _registered_method=True)
        self.OrderStatusUpdate = channel.unary_unary(
                '/algos.AlgorithmServer/OrderStatusUpdate',
                request_serializer=algos__pb2.OrderStatusUpdateMessage.SerializeToString,
                response_deserializer=algos__pb2.OrderStatusUpdateAck.FromString,
                _registered_method=True)
        self.SubscribeSymbol = channel.unary_unary(
                '/algos.AlgorithmServer/SubscribeSymbol',
                request_serializer=algos__pb2.SymbolDataRequest.SerializeToString,
                response_deserializer=algos__pb2.SymbolDataResponse.FromString,
                _registered_method=True)


class AlgorithmServerServicer(object):
    """Services
    """

    def InitializeAlgorithm(self, request, context):
        """Management services (Doyen -> your script)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartAlgorithm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PauseAlgorithm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResumeAlgorithm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopAlgorithm(self, request, context):
        """This can be called from your script -> Doyen for emergency stops.
        When an algorithm is stopped, data and orders are no longer processed.
        You will have to cancel any existing orders from Doyen.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAvailableAlgorithms(self, request, context):
        """Algorithm discovery services (Doyen -> your script)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRunningAlgorithms(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendOrder(self, request, context):
        """Order management services (your script -> Doyen)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TradeData(self, request, context):
        """Data output (Doyen -> your script)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CandlestickData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DepthOfBookData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OrderStatusUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeSymbol(self, request, context):
        """Data input (your script -> Doyen))
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AlgorithmServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitializeAlgorithm': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeAlgorithm,
                    request_deserializer=algos__pb2.InitializeAlgorithmRequest.FromString,
                    response_serializer=algos__pb2.InitializeAlgorithmResponse.SerializeToString,
            ),
            'StartAlgorithm': grpc.unary_unary_rpc_method_handler(
                    servicer.StartAlgorithm,
                    request_deserializer=algos__pb2.StartAlgorithmRequest.FromString,
                    response_serializer=algos__pb2.StartAlgorithmResponse.SerializeToString,
            ),
            'PauseAlgorithm': grpc.unary_unary_rpc_method_handler(
                    servicer.PauseAlgorithm,
                    request_deserializer=algos__pb2.PauseAlgorithmRequest.FromString,
                    response_serializer=algos__pb2.PauseAlgorithmResponse.SerializeToString,
            ),
            'ResumeAlgorithm': grpc.unary_unary_rpc_method_handler(
                    servicer.ResumeAlgorithm,
                    request_deserializer=algos__pb2.ResumeAlgorithmRequest.FromString,
                    response_serializer=algos__pb2.ResumeAlgorithmResponse.SerializeToString,
            ),
            'StopAlgorithm': grpc.unary_unary_rpc_method_handler(
                    servicer.StopAlgorithm,
                    request_deserializer=algos__pb2.StopAlgorithmRequest.FromString,
                    response_serializer=algos__pb2.StopAlgorithmResponse.SerializeToString,
            ),
            'ListAvailableAlgorithms': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAvailableAlgorithms,
                    request_deserializer=algos__pb2.ListAvailableAlgorithmsRequest.FromString,
                    response_serializer=algos__pb2.ListAvailableAlgorithmsResponse.SerializeToString,
            ),
            'ListRunningAlgorithms': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRunningAlgorithms,
                    request_deserializer=algos__pb2.ListRunningAlgorithmsRequest.FromString,
                    response_serializer=algos__pb2.ListRunningAlgorithmsResponse.SerializeToString,
            ),
            'SendOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.SendOrder,
                    request_deserializer=algos__pb2.SendOrderRequest.FromString,
                    response_serializer=algos__pb2.SendOrderResponse.SerializeToString,
            ),
            'CancelOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrder,
                    request_deserializer=algos__pb2.CancelOrderRequest.FromString,
                    response_serializer=algos__pb2.CancelOrderResponse.SerializeToString,
            ),
            'TradeData': grpc.unary_unary_rpc_method_handler(
                    servicer.TradeData,
                    request_deserializer=algos__pb2.TradeMessage.FromString,
                    response_serializer=algos__pb2.TradeAck.SerializeToString,
            ),
            'CandlestickData': grpc.unary_unary_rpc_method_handler(
                    servicer.CandlestickData,
                    request_deserializer=algos__pb2.CandlestickMessage.FromString,
                    response_serializer=algos__pb2.CandlestickAck.SerializeToString,
            ),
            'DepthOfBookData': grpc.unary_unary_rpc_method_handler(
                    servicer.DepthOfBookData,
                    request_deserializer=algos__pb2.DepthOfBookMessage.FromString,
                    response_serializer=algos__pb2.DepthOfBookAck.SerializeToString,
            ),
            'OrderStatusUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.OrderStatusUpdate,
                    request_deserializer=algos__pb2.OrderStatusUpdateMessage.FromString,
                    response_serializer=algos__pb2.OrderStatusUpdateAck.SerializeToString,
            ),
            'SubscribeSymbol': grpc.unary_unary_rpc_method_handler(
                    servicer.SubscribeSymbol,
                    request_deserializer=algos__pb2.SymbolDataRequest.FromString,
                    response_serializer=algos__pb2.SymbolDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'algos.AlgorithmServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('algos.AlgorithmServer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AlgorithmServer(object):
    """Services
    """

    @staticmethod
    def InitializeAlgorithm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/algos.AlgorithmServer/InitializeAlgorithm',
            algos__pb2.InitializeAlgorithmRequest.SerializeToString,
            algos__pb2.InitializeAlgorithmResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartAlgorithm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/algos.AlgorithmServer/StartAlgorithm',
            algos__pb2.StartAlgorithmRequest.SerializeToString,
            algos__pb2.StartAlgorithmResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PauseAlgorithm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/algos.AlgorithmServer/PauseAlgorithm',
            algos__pb2.PauseAlgorithmRequest.SerializeToString,
            algos__pb2.PauseAlgorithmResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResumeAlgorithm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/algos.AlgorithmServer/ResumeAlgorithm',
            algos__pb2.ResumeAlgorithmRequest.SerializeToString,
            algos__pb2.ResumeAlgorithmResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopAlgorithm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/algos.AlgorithmServer/StopAlgorithm',
            algos__pb2.StopAlgorithmRequest.SerializeToString,
            algos__pb2.StopAlgorithmResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAvailableAlgorithms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/algos.AlgorithmServer/ListAvailableAlgorithms',
            algos__pb2.ListAvailableAlgorithmsRequest.SerializeToString,
            algos__pb2.ListAvailableAlgorithmsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRunningAlgorithms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/algos.AlgorithmServer/ListRunningAlgorithms',
            algos__pb2.ListRunningAlgorithmsRequest.SerializeToString,
            algos__pb2.ListRunningAlgorithmsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/algos.AlgorithmServer/SendOrder',
            algos__pb2.SendOrderRequest.SerializeToString,
            algos__pb2.SendOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/algos.AlgorithmServer/CancelOrder',
            algos__pb2.CancelOrderRequest.SerializeToString,
            algos__pb2.CancelOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TradeData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/algos.AlgorithmServer/TradeData',
            algos__pb2.TradeMessage.SerializeToString,
            algos__pb2.TradeAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CandlestickData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/algos.AlgorithmServer/CandlestickData',
            algos__pb2.CandlestickMessage.SerializeToString,
            algos__pb2.CandlestickAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DepthOfBookData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/algos.AlgorithmServer/DepthOfBookData',
            algos__pb2.DepthOfBookMessage.SerializeToString,
            algos__pb2.DepthOfBookAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OrderStatusUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/algos.AlgorithmServer/OrderStatusUpdate',
            algos__pb2.OrderStatusUpdateMessage.SerializeToString,
            algos__pb2.OrderStatusUpdateAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeSymbol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/algos.AlgorithmServer/SubscribeSymbol',
            algos__pb2.SymbolDataRequest.SerializeToString,
            algos__pb2.SymbolDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
